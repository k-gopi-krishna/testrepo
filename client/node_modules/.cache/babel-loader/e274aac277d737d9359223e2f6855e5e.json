{"ast":null,"code":"var _jsxFileName = \"/home/gopi/Desktop/medco/client/src/components/auth/DoctorRegister.js\";\nimport React, { useState, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { setAlert } from '../../actions/alert';\nimport { register } from '../../actions/authDoctor';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst DoctorRegister = ({\n  setAlert,\n  register,\n  isDoctorAuthenticated\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    password2: ''\n  });\n  const {\n    name,\n    email,\n    password,\n    password2\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (password !== password2) {\n      setAlert('Password do not match', 'danger');\n    } else {\n      register({\n        name,\n        email,\n        password\n      });\n    }\n  };\n\n  if (isDoctorAuthenticated) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    id: \"common\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"common-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-side\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"heading-common\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 33\n    }\n  }, \"Doctor\"), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-user-md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => onSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    for: \"exampleInputEmail1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 33\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    className: \"form-control\",\n    placeholder: \"Enter your email address.\",\n    name: \"email\",\n    value: email,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    id: \"emailHelp\",\n    className: \"form-text text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 33\n    }\n  }, \"This site uses \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://en.gravatar.com/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 103\n    }\n  }, \"Gravatar \"), \" so if you want a profile image, use a Gravatar email\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    for: \"exampleInputEmail1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 33\n    }\n  }, \"Full Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Enter your full name.\",\n    name: \"name\",\n    value: name,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    for: \"exampleInputPassword1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 33\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    className: \"form-control\",\n    placeholder: \"Enter password.\",\n    name: \"password\",\n    value: password,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"label\",\n    for: \"exampleInputPassword1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 33\n    }\n  }, \"Confirm Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    className: \"form-control\",\n    placeholder: \"Enter your password again.\",\n    name: \"password2\",\n    value: password2,\n    onChange: e => onChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-info\",\n    value: \"Sign Up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"img-side\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"register-user\",\n    src: require(\"../../img/newDoctor1.svg\"),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nDoctorRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isDoctorAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  isDoctorAuthenticated: state.authDoctor.isDoctorAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  register\n})(DoctorRegister);","map":{"version":3,"sources":["/home/gopi/Desktop/medco/client/src/components/auth/DoctorRegister.js"],"names":["React","useState","Fragment","Redirect","setAlert","register","PropTypes","connect","DoctorRegister","isDoctorAuthenticated","formData","setFormData","name","email","password","password2","onChange","e","target","value","onSubmit","preventDefault","require","propTypes","func","isRequired","bool","mapStateToProps","state","authDoctor"],"mappings":"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","sourcesContent":["import React, { useState,Fragment } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {setAlert} from '../../actions/alert';\r\nimport { register} from '../../actions/authDoctor';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst DoctorRegister = ({ setAlert, register, isDoctorAuthenticated }) => {\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        password2: ''\r\n    });\r\n\r\n    const {name, email, password, password2} = formData;\r\n    const onChange = e => setFormData({\r\n        ...formData,\r\n        [e.target.name]: e.target.value\r\n    });\r\n    const onSubmit = async e => {\r\n        e.preventDefault();\r\n        if(password !== password2) {\r\n            setAlert('Password do not match', 'danger');\r\n        } else {\r\n            register({ name, email, password });\r\n        }\r\n    }\r\n    if(isDoctorAuthenticated) {\r\n        return <Redirect to='/dashboard' />\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <section id=\"common\">\r\n                <div className=\"container\">\r\n                    <div className=\"common-form\">\r\n                        <div className=\"form-side\">\r\n                            <div className=\"heading-common\">\r\n                            <h1><strong>Doctor</strong>\r\n                                <i className=\"fas fa-user-md\"></i>\r\n                            </h1>\r\n                            </div>\r\n                            <form onSubmit={e => onSubmit(e)}>\r\n                                <div className=\"form-group\">\r\n                                <label className=\"label\" for=\"exampleInputEmail1\">Email address</label>\r\n                                <input \r\n                                    type=\"email\"\r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Enter your email address.\" \r\n                                    name=\"email\"\r\n                                    value={email}\r\n                                    onChange={e => onChange(e)}\r\n                                />\r\n                                <small id=\"emailHelp\" className=\"form-text text-muted\">This site uses <a href=\"https://en.gravatar.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Gravatar </a> so if you want a profile image, use a Gravatar email</small>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                <label className=\"label\" for=\"exampleInputEmail1\">Full Name</label>\r\n                                <input \r\n                                    type=\"text\"\r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Enter your full name.\" \r\n                                    name=\"name\"\r\n                                    value={name}\r\n                                    onChange={e => onChange(e)}\r\n                                />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                <label className=\"label\" for=\"exampleInputPassword1\">Password</label>\r\n                                <input \r\n                                    type=\"password\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Enter password.\" \r\n                                    name=\"password\"\r\n                                    value={password} \r\n                                    onChange={e => onChange(e)}\r\n                                />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                <label className=\"label\" for=\"exampleInputPassword1\">Confirm Password</label>\r\n                                <input \r\n                                    type=\"password\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Enter your password again.\" \r\n                                    name=\"password2\"\r\n                                    value={password2} \r\n                                    onChange={e => onChange(e)}\r\n                                />\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-info\" value=\"Sign Up\" />\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"img-side\">\r\n                            <img className=\"register-user\" src={require(\"../../img/newDoctor1.svg\")} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nDoctorRegister.propTypes = {\r\n    setAlert: PropTypes.func.isRequired,\r\n    register: PropTypes.func.isRequired,\r\n    isDoctorAuthenticated: PropTypes.bool\r\n}\r\n\r\nconst mapStateToProps =state => ({\r\n    isDoctorAuthenticated: state.authDoctor.isDoctorAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {setAlert, register})(DoctorRegister);\r\n"]},"metadata":{},"sourceType":"module"}